{
    "title": "@084: L2 - distance",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@084: L2 - distance</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    html { -webkit-text-size-adjust: 100%; }\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { display: inline-block; line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"l2---distance\">L2 - distance</h1>\n<ul>\n<li>Seja uma string formada por d\u00edgitos e underlines\n<code>.</code>.</li>\n<li>Seja um valor de limite L.</li>\n</ul>\n<p>Objetivos:</p>\n<ul>\n<li>Voc\u00ea deve substituir todos os <code>.</code> por d\u00edgitos seguindo as\nseguintes regras.\n<ul>\n<li>S\u00f3 pode utilizar d\u00edgitos de 0 at\u00e9 L, incluindo L.</li>\n<li>Qualquer d\u00edgito precisa estar a uma dist\u00e2ncia m\u00ednima de L casas de\noutra ocorr\u00eancia dele mesmo, tanto \u00e0 esquerda como \u00e0 direita.</li>\n</ul></li>\n<li>Para cada problema, existe uma e somente uma solu\u00e7\u00e3o.</li>\n</ul>\n<h2 id=\"entrada-e-sa\u00edda\">Entrada e Sa\u00edda</h2>\n<ul>\n<li>Entrada\n<ul>\n<li>1a linha: sequ\u00eancia.</li>\n<li>2a linha: valor de L.</li>\n</ul></li>\n<li>Sa\u00edda\n<ul>\n<li>A string solu\u00e7\u00e3o do problema.</li>\n</ul></li>\n</ul>\n<h2 id=\"limites\">Limites</h2>\n<ul>\n<li>sequ\u00eancia de tamanho t, 0 &gt; t &gt; 100</li>\n<li>0 &gt; L &gt; 100</li>\n</ul>\n<h2 id=\"testes\">Testes</h2>\n<div class=\"sourceCode\" id=\"cb1\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>01.2.</span>\n<span id=\"cb1-3\"><a href=\"#cb1-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>3</span>\n<span id=\"cb1-4\"><a href=\"#cb1-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb1-5\"><a href=\"#cb1-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>01320</span>\n<span id=\"cb1-6\"><a href=\"#cb1-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n<span id=\"cb1-7\"><a href=\"#cb1-7\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-8\"><a href=\"#cb1-8\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-9\"><a href=\"#cb1-9\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-10\"><a href=\"#cb1-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 02</span>\n<span id=\"cb1-11\"><a href=\"#cb1-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>.0..231..5</span>\n<span id=\"cb1-12\"><a href=\"#cb1-12\" aria-hidden=\"true\" tabindex=\"-1\"></a>5</span>\n<span id=\"cb1-13\"><a href=\"#cb1-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb1-14\"><a href=\"#cb1-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>1045231045</span>\n<span id=\"cb1-15\"><a href=\"#cb1-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n<span id=\"cb1-16\"><a href=\"#cb1-16\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-17\"><a href=\"#cb1-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 01</span>\n<span id=\"cb1-18\"><a href=\"#cb1-18\" aria-hidden=\"true\" tabindex=\"-1\"></a>2..0..............3...........</span>\n<span id=\"cb1-19\"><a href=\"#cb1-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>3</span>\n<span id=\"cb1-20\"><a href=\"#cb1-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb1-21\"><a href=\"#cb1-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>213021302130213021302130213021</span>\n<span id=\"cb1-22\"><a href=\"#cb1-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n<span id=\"cb1-23\"><a href=\"#cb1-23\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-24\"><a href=\"#cb1-24\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-25\"><a href=\"#cb1-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03</span>\n<span id=\"cb1-26\"><a href=\"#cb1-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>0..32..41.</span>\n<span id=\"cb1-27\"><a href=\"#cb1-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>5</span>\n<span id=\"cb1-28\"><a href=\"#cb1-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb1-29\"><a href=\"#cb1-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>0413250413</span>\n<span id=\"cb1-30\"><a href=\"#cb1-30\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n<span id=\"cb1-31\"><a href=\"#cb1-31\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-32\"><a href=\"#cb1-32\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-33\"><a href=\"#cb1-33\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 03</span>\n<span id=\"cb1-34\"><a href=\"#cb1-34\" aria-hidden=\"true\" tabindex=\"-1\"></a>9....7.620.5318.....</span>\n<span id=\"cb1-35\"><a href=\"#cb1-35\" aria-hidden=\"true\" tabindex=\"-1\"></a>9</span>\n<span id=\"cb1-36\"><a href=\"#cb1-36\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb1-37\"><a href=\"#cb1-37\" aria-hidden=\"true\" tabindex=\"-1\"></a>95318746209531874620</span>\n<span id=\"cb1-38\"><a href=\"#cb1-38\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n<span id=\"cb1-39\"><a href=\"#cb1-39\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-40\"><a href=\"#cb1-40\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>\n<span id=\"cb1-41\"><a href=\"#cb1-41\" aria-hidden=\"true\" tabindex=\"-1\"></a>12.3...0</span>\n<span id=\"cb1-42\"><a href=\"#cb1-42\" aria-hidden=\"true\" tabindex=\"-1\"></a>4</span>\n<span id=\"cb1-43\"><a href=\"#cb1-43\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb1-44\"><a href=\"#cb1-44\" aria-hidden=\"true\" tabindex=\"-1\"></a>12034120</span>\n<span id=\"cb1-45\"><a href=\"#cb1-45\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n<span id=\"cb1-46\"><a href=\"#cb1-46\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb1-47\"><a href=\"#cb1-47\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>\n<span id=\"cb1-48\"><a href=\"#cb1-48\" aria-hidden=\"true\" tabindex=\"-1\"></a>0.76.14..2..5..</span>\n<span id=\"cb1-49\"><a href=\"#cb1-49\" aria-hidden=\"true\" tabindex=\"-1\"></a>7</span>\n<span id=\"cb1-50\"><a href=\"#cb1-50\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb1-51\"><a href=\"#cb1-51\" aria-hidden=\"true\" tabindex=\"-1\"></a>027651430276514</span>\n<span id=\"cb1-52\"><a href=\"#cb1-52\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n01.2.\n3\n======== EXPECT\n01320\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02\n.0..231..5\n5\n======== EXPECT\n1045231045\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 01\n2..0..............3...........\n3\n======== EXPECT\n213021302130213021302130213021\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n0..32..41.\n5\n======== EXPECT\n0413250413\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n9....7.620.5318.....\n9\n======== EXPECT\n95318746209531874620\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n12.3...0\n4\n======== EXPECT\n12034120\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n0.76.14..2..5..\n7\n======== EXPECT\n027651430276514\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "hs": [
            {
                "name": "Main.hs",
                "contents": "import Data.List\nimport Data.Maybe\n\n-- retorna o subvetor incluindo o elemento posi\u00e7\u00e3o \u00edndice e lim elementos a esquerda e a direita\nneib :: [a] -> Int -> Int -> [a]\nneib xs index lim = ...\n\n-- verifica se o valor existe no vetor\nexists :: Eq a => a -> [a] -> Bool\nexists y xs = ...\n\n-- converte de digito para char\ndig2char :: (Eq a, Num a, Enum a) => a -> Char\ndig2char dig = ...\n\n-- verifica se esse valor pode ser inserido nesse \u00edndice\nfit :: (String, Int) ->  Int -> Int -> Bool\nfit (xs, lim) index value = ...\n\n-- pega as posi\u00e7\u00f5es de todos os .\ngetHoles :: String -> [Int]\ngetHoles xs = ...\n\n-- insere esse valor nesse index e retorna o novo vetor resultante\nset :: String -> Int -> Int -> String\nset xs index value = ...\n\n-- tenta resolver o problema para essa posi\u00e7\u00e3o\n-- se \u00e9 poss\u00edvel resolver, retorna Just resposta, sen\u00e3o Nothing\n-- problema (xs, lim)\n-- holes: lista de posi\u00e7\u00f5es a serem preenchidas\n-- hindex: posicao atual no vetor de holes\nsolve :: (String, Int) -> [Int] -> Int -> Maybe String\nsolve (xs, lim) holes hindex = ...\n\n-- prepara a entrada para a fun\u00e7\u00e3o recursiva de resolu\u00e7\u00e3o\nmainSolver :: String -> Int -> String\nmainSolver xs lim = ...\n\nmain :: IO ()\nmain = do\n    xs <- getLine\n    lim <- readLn :: IO Int\n    putStrLn $ mainSolver xs lim\n\n\n------------------------------------------------------------------------------------\n-- Testes para lhe auxiliar a construir a solu\u00e7\u00e3o de forma mais segura\n------------------------------------------------------------------------------------\n\n\nneibTest :: IO ()\nneibTest = do\n    print $ neib \"abcdef..\" 0 2 == \"abc\"\n    print $ neib \"abc.def\"  3 1 == \"c.d\"\n    print $ neib \"abc.def\"  3 2 == \"bc.de\"\n    print $ neib \"abc.def\"  1 2 == \"abc.\"\n    print $ neib \"abc.def\"  5 3 == \"c.def\"\n\ndig2charTest :: IO ()\ndig2charTest = do\n    print $ map dig2char [0..9] == ['0'..'9']\n\nsetTest :: IO ()\nsetTest = do\n    print $ set \"12345\" 0 9 == \"92345\"\n    print $ set \"12345\" 1 9 == \"19345\"\n    print $ set \"12345\" 4 9 == \"12349\"\n\nfitTest :: IO ()\nfitTest = do -- (fit (\"12.345\", 1) 2) se torna uma fun\u00e7\u00e3o curry faltando s\u00f3 uma var que seria o valor recebido do vetor\n    print $ map (fit (\"12.345\", 1) 2) [1,2,3,4,5] == [True, False, False, True, True]\n    print $ map (fit (\"12.345\", 2) 2) [1,2,3,4,5] == [False, False, False, False, True]\n    print $ map (fit (\"12.345\", 3) 2) [1,2,3,4,5] == [False, False, False, False, False]\n    print $ map (fit (\"12345.\", 4) 5) [1,2,3,4,5] == [True, False, False, False, False]\n\ngetHolesTest :: IO ()\ngetHolesTest = do\n    print $ getHoles \"12.3..\" == [2,4,5]\n    print $ getHoles \"12.3.4\" == [2,4]\n    print $ getHoles \"...3.4\" == [0,1,2,4]\n\nmainTest :: IO ()\nmainTest = do\n    print $ mainSolver \"01.2.\" 3 == \"01320\"\n    print $ mainSolver \".0..231..5\" 5 == \"1045231045\"\n    print $ mainSolver \"2..0..............3...........\" 3 == \"213021302130213021302130213021\"\n    print $ mainSolver \"0..32..41.\" 5 == \"0413250413\"\n    print $ mainSolver \"9....7.620.5318.....\" 9 == \"95318746209531874620\"\n",
                "encoding": 0
            }
        ]
    }
}
