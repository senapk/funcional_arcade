{
    "title": "@concatmap: Data.List.concatMap",
    "description": "# Data.List.concatMap\n\nA fun\u00e7\u00e3o `concatMap fn xs` equivale a aplicar a fun\u00e7\u00e3o `fn` a cada elemento da lista `xs` e ent\u00e3o concatenar os valores.\nUtilize a opera\u00e7\u00e3o de `fold` e `map` para implementar `concatMap`.\n\n```hs\n--IN : Uma lista u, uma fun\u00e7\u00e3o fn\n--OUT: Uma lista com a concatena\u00e7\u00e3o da aplica\u00e7\u00e3o da fun\u00e7\u00e3o map\nconcatMap:: (a -> [b]) -> [a] -> [b]\n```\n\n## Testes\n\n```txt\n>>>>>>>>\n========\n[1,1,2,2,3,3,4,4]\n[1,1,2,3,1,2,3,4,5]\n[(1.0,3.0,0.5),(3.0,5.0,1.5),(5.0,7.0,2.5)]\n<<<<<<<<\n\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n======== EXPECT\n[1,1,2,2,3,3,4,4]\n[1,1,2,3,1,2,3,4,5]\n[(1.0,3.0,0.5),(3.0,5.0,1.5),(5.0,7.0,2.5)]\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "hs": [
            {
                "name": "Main.hs",
                "contents": "main :: IO ()\nmain = do\n    print $ concatmap (\\x -> [x,x]) [1,2,3,4] -- [1,1,2,2,3,3,4,4]\n    print $ concatMap (enumFromTo 1) [1,3,5] -- [1,1,2,3,1,2,3,4,5]\n    print $ concatMap (\\x -> [(x,x+2,x/2)]) [1,3,5] -- [(1.0,3.0,0.5),(3.0,5.0,1.5),(5.0,7.0,2.5)]\n",
                "type": "show"
            }
        ]
    }
}
