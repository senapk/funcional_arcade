{
    "title": "@distance: Backtrack dist\u00e2ncia",
    "description": "# Backtrack dist\u00e2ncia\n\n- Seja uma string formada por d\u00edgitos e underlines `.`.\n- Seja um valor de limite L.\n\nObjetivos:\n\n- Voc\u00ea deve substituir todos os `.` por d\u00edgitos seguindo as seguintes regras.\n  - S\u00f3 pode utilizar d\u00edgitos de 0 at\u00e9 L, incluindo L.\n  - Qualquer d\u00edgito precisa estar a uma dist\u00e2ncia m\u00ednima de L casas de outra ocorr\u00eancia dele mesmo, tanto \u00e0 esquerda como \u00e0 direita.\n\n- Para cada problema, existe uma e somente uma solu\u00e7\u00e3o.\n\n## Entrada e Sa\u00edda\n\n- Entrada\n  - 1a linha: sequ\u00eancia.\n  - 2a linha: valor de L.\n- Sa\u00edda\n  - A string solu\u00e7\u00e3o do problema.\n\n## Limites\n\n- sequ\u00eancia de tamanho t, 0 > t > 100\n- 0 > L > 100\n\n## Testes\n\n```txt\n>>>>>>>>\n01.2.\n3\n========\n01320\n<<<<<<<<\n\n\n\n>>>>>>>> 02\n.0..231..5\n5\n========\n1045231045\n<<<<<<<<\n\n>>>>>>>> 01\n2..0..............3...........\n3\n========\n213021302130213021302130213021\n<<<<<<<<\n\n\n>>>>>>>> 03\n0..32..41.\n5\n========\n0413250413\n<<<<<<<<\n\n\n>>>>>>>> 03\n9....7.620.5318.....\n9\n========\n95318746209531874620\n<<<<<<<<\n\n>>>>>>>>\n12.3...0\n4\n========\n12034120\n<<<<<<<<\n\n>>>>>>>>\n0.76.14..2..5..\n7\n========\n027651430276514\n<<<<<<<<\n\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n01.2.\n3\n======== EXPECT\n01320\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 02\n.0..231..5\n5\n======== EXPECT\n1045231045\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 01\n2..0..............3...........\n3\n======== EXPECT\n213021302130213021302130213021\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n0..32..41.\n5\n======== EXPECT\n0413250413\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT 03\n9....7.620.5318.....\n9\n======== EXPECT\n95318746209531874620\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n12.3...0\n4\n======== EXPECT\n12034120\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n0.76.14..2..5..\n7\n======== EXPECT\n027651430276514\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "hs": [
            {
                "name": "Main.hs",
                "contents": "import Data.List\nimport Data.Maybe\n\n-- retorna o subvetor incluindo o elemento posi\u00e7\u00e3o \u00edndice e lim elementos a esquerda e a direita\nneib :: [a] -> Int -> Int -> [a]\nneib xs index lim = ...\n\n-- verifica se o valor existe no vetor\nexists :: Eq a => a -> [a] -> Bool\nexists y xs = ...\n\n-- converte de digito para char\ndig2char :: (Eq a, Num a, Enum a) => a -> Char\ndig2char dig = ...\n\n-- verifica se esse valor pode ser inserido nesse \u00edndice\nfit :: (String, Int) ->  Int -> Int -> Bool\nfit (xs, lim) index value = ...\n\n-- pega as posi\u00e7\u00f5es de todos os .\ngetHoles :: String -> [Int]\ngetHoles xs = ...\n\n-- insere esse valor nesse index e retorna o novo vetor resultante\nset :: String -> Int -> Int -> String\nset xs index value = ...\n\n-- tenta resolver o problema para essa posi\u00e7\u00e3o\n-- se \u00e9 poss\u00edvel resolver, retorna Just resposta, sen\u00e3o Nothing\n-- problema (xs, lim)\n-- holes: lista de posi\u00e7\u00f5es a serem preenchidas\n-- hindex: posicao atual no vetor de holes\nsolve :: (String, Int) -> [Int] -> Int -> Maybe String\nsolve (xs, lim) holes hindex = ...\n\n-- prepara a entrada para a fun\u00e7\u00e3o recursiva de resolu\u00e7\u00e3o\nmainSolver :: String -> Int -> String\nmainSolver xs lim = ...\n\nmain :: IO ()\nmain = do\n    xs <- getLine\n    lim <- readLn :: IO Int\n    putStrLn $ mainSolver xs lim\n\n\n------------------------------------------------------------------------------------\n-- Testes para lhe auxiliar a construir a solu\u00e7\u00e3o de forma mais segura\n------------------------------------------------------------------------------------\n\n\nneibTest :: IO ()\nneibTest = do\n    print $ neib \"abcdef..\" 0 2 == \"abc\"\n    print $ neib \"abc.def\"  3 1 == \"c.d\"\n    print $ neib \"abc.def\"  3 2 == \"bc.de\"\n    print $ neib \"abc.def\"  1 2 == \"abc.\"\n    print $ neib \"abc.def\"  5 3 == \"c.def\"\n\ndig2charTest :: IO ()\ndig2charTest = do\n    print $ map dig2char [0..9] == ['0'..'9']\n\nsetTest :: IO ()\nsetTest = do\n    print $ set \"12345\" 0 9 == \"92345\"\n    print $ set \"12345\" 1 9 == \"19345\"\n    print $ set \"12345\" 4 9 == \"12349\"\n\nfitTest :: IO ()\nfitTest = do -- (fit (\"12.345\", 1) 2) se torna uma fun\u00e7\u00e3o curry faltando s\u00f3 uma var que seria o valor recebido do vetor\n    print $ map (fit (\"12.345\", 1) 2) [1,2,3,4,5] == [True, False, False, True, True]\n    print $ map (fit (\"12.345\", 2) 2) [1,2,3,4,5] == [False, False, False, False, True]\n    print $ map (fit (\"12.345\", 3) 2) [1,2,3,4,5] == [False, False, False, False, False]\n    print $ map (fit (\"12345.\", 4) 5) [1,2,3,4,5] == [True, False, False, False, False]\n\ngetHolesTest :: IO ()\ngetHolesTest = do\n    print $ getHoles \"12.3..\" == [2,4,5]\n    print $ getHoles \"12.3.4\" == [2,4]\n    print $ getHoles \"...3.4\" == [0,1,2,4]\n\nmainTest :: IO ()\nmainTest = do\n    print $ mainSolver \"01.2.\" 3 == \"01320\"\n    print $ mainSolver \".0..231..5\" 5 == \"1045231045\"\n    print $ mainSolver \"2..0..............3...........\" 3 == \"213021302130213021302130213021\"\n    print $ mainSolver \"0..32..41.\" 5 == \"0413250413\"\n    print $ mainSolver \"9....7.620.5318.....\" 9 == \"95318746209531874620\"\n",
                "type": "show"
            }
        ]
    }
}
