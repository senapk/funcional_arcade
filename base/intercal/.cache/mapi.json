{
    "title": "@intercal: Intercalar duas listas",
    "description": "# Intercalar duas listas\n\n```hs\n--IN : Duas listas a e b\n--OUT: Lista com os elementos de a e b intercalados\nintercal [1,2,3] [7,8,9] == [1,7,2,8,3,9]\nintercal [1,2,3,4] [8,9] == [1,8,2,9,3,4]\nintercal [5] [1,2,6] == [5,1,2,6]\n```\n\n## Guia\n\n- Fa\u00e7a da forma recursiva\n  - se tem elementos nas duas listas, pegue um de cada\n  - se tem uma lista fazia, retorne a outra lista\n- Fa\u00e7a utilizando zip e fold\n  - pegue a lista menor e concatene ela com uma lista infinita de valores -1\n  - junte as listas num zip\n  - remonte a lista com um fold\n  - remova os elementos -1\n\n## Testes\n\n```txt\n>>>>>>>>\n[1,2,3]\n[7,8,9]\n========\n[1,7,2,8,3,9]\n<<<<<<<<\n\n>>>>>>>>\n[1,2,3,4]\n[8,9]\n========\n[1,8,2,9,3,4]\n<<<<<<<<\n\n>>>>>>>>\n[5]\n[1,2,6]\n========\n[5,1,2,6]\n<<<<<<<<\n\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n[1,2,3]\n[7,8,9]\n======== EXPECT\n[1,7,2,8,3,9]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[1,2,3,4]\n[8,9]\n======== EXPECT\n[1,8,2,9,3,4]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[5]\n[1,2,6]\n======== EXPECT\n[5,1,2,6]\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "hs": [
            {
                "name": "Main.hs",
                "contents": "main :: IO ()\nmain = do\n    a <- readLn :: IO [Int]\n    b <- readLn :: IO [Int]\n    print $ intercal a b\n",
                "type": "show"
            }
        ]
    }
}
