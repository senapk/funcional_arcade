{
    "title": "@maxsubseq: Subsequ\u00eancia com maior soma",
    "description": "<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" lang=\"\" xml:lang=\"\">\n<head>\n  <meta charset=\"utf-8\" />\n  <meta name=\"generator\" content=\"pandoc\" />\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=yes\" />\n  <title>@maxsubseq: Subsequ\u00eancia com maior soma</title>\n  <style>\n    code{white-space: pre-wrap;}\n    span.smallcaps{font-variant: small-caps;}\n    div.columns{display: flex; gap: min(4vw, 1.5em);}\n    div.column{flex: auto; overflow-x: auto;}\n    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}\n    /* The extra [class] is a hack that increases specificity enough to\n       override a similar rule in reveal.js */\n    ul.task-list[class]{list-style: none;}\n    ul.task-list li input[type=\"checkbox\"] {\n      font-size: inherit;\n      width: 0.8em;\n      margin: 0 0.8em 0.2em -1.6em;\n      vertical-align: middle;\n    }\n    /* CSS for syntax highlighting */\n    pre > code.sourceCode { white-space: pre; position: relative; }\n    pre > code.sourceCode > span { line-height: 1.25; }\n    pre > code.sourceCode > span:empty { height: 1.2em; }\n    .sourceCode { overflow: visible; }\n    code.sourceCode > span { color: inherit; text-decoration: inherit; }\n    div.sourceCode { margin: 1em 0; }\n    pre.sourceCode { margin: 0; }\n    @media screen {\n    div.sourceCode { overflow: auto; }\n    }\n    @media print {\n    pre > code.sourceCode { white-space: pre-wrap; }\n    pre > code.sourceCode > span { display: inline-block; text-indent: -5em; padding-left: 5em; }\n    }\n    pre.numberSource code\n      { counter-reset: source-line 0; }\n    pre.numberSource code > span\n      { position: relative; left: -4em; counter-increment: source-line; }\n    pre.numberSource code > span > a:first-child::before\n      { content: counter(source-line);\n        position: relative; left: -1em; text-align: right; vertical-align: baseline;\n        border: none; display: inline-block;\n        -webkit-touch-callout: none; -webkit-user-select: none;\n        -khtml-user-select: none; -moz-user-select: none;\n        -ms-user-select: none; user-select: none;\n        padding: 0 4px; width: 4em;\n        color: #aaaaaa;\n      }\n    pre.numberSource { margin-left: 3em; border-left: 1px solid #aaaaaa;  padding-left: 4px; }\n    div.sourceCode\n      {   }\n    @media screen {\n    pre > code.sourceCode > span > a:first-child::before { text-decoration: underline; }\n    }\n    code span.al { color: #ff0000; font-weight: bold; } /* Alert */\n    code span.an { color: #60a0b0; font-weight: bold; font-style: italic; } /* Annotation */\n    code span.at { color: #7d9029; } /* Attribute */\n    code span.bn { color: #40a070; } /* BaseN */\n    code span.bu { color: #008000; } /* BuiltIn */\n    code span.cf { color: #007020; font-weight: bold; } /* ControlFlow */\n    code span.ch { color: #4070a0; } /* Char */\n    code span.cn { color: #880000; } /* Constant */\n    code span.co { color: #60a0b0; font-style: italic; } /* Comment */\n    code span.cv { color: #60a0b0; font-weight: bold; font-style: italic; } /* CommentVar */\n    code span.do { color: #ba2121; font-style: italic; } /* Documentation */\n    code span.dt { color: #902000; } /* DataType */\n    code span.dv { color: #40a070; } /* DecVal */\n    code span.er { color: #ff0000; font-weight: bold; } /* Error */\n    code span.ex { } /* Extension */\n    code span.fl { color: #40a070; } /* Float */\n    code span.fu { color: #06287e; } /* Function */\n    code span.im { color: #008000; font-weight: bold; } /* Import */\n    code span.in { color: #60a0b0; font-weight: bold; font-style: italic; } /* Information */\n    code span.kw { color: #007020; font-weight: bold; } /* Keyword */\n    code span.op { color: #666666; } /* Operator */\n    code span.ot { color: #007020; } /* Other */\n    code span.pp { color: #bc7a00; } /* Preprocessor */\n    code span.sc { color: #4070a0; } /* SpecialChar */\n    code span.ss { color: #bb6688; } /* SpecialString */\n    code span.st { color: #4070a0; } /* String */\n    code span.va { color: #19177c; } /* Variable */\n    code span.vs { color: #4070a0; } /* VerbatimString */\n    code span.wa { color: #60a0b0; font-weight: bold; font-style: italic; } /* Warning */\n  </style>\n</head>\n<body>\n<h1 id=\"subsequ\u00eancia-com-maior-soma\">Subsequ\u00eancia com maior soma</h1>\n<p><a href=\"solver.hs\"></a></p>\n<h2 id=\"guia\">Guia</h2>\n<ul>\n<li>Entrada: Lista u de inteiros (podem ser positivos, negativos ou\nzero).</li>\n<li>Sa\u00edda: Sublista de u de elementos consecutivos cuja soma \u00e9\nm\u00e1xima.</li>\n</ul>\n<p>Primeiro voc\u00ea precisa gerar todas as subsequencias poss\u00edveis e depois\nprocurar a que gera maior soma.</p>\n<div class=\"sourceCode\" id=\"cb1\"><pre class=\"sourceCode hs\"><code class=\"sourceCode haskell\"><span id=\"cb1-1\"><a href=\"#cb1-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"op\">&gt;</span> all_subseqs [<span class=\"dv\">1</span><span class=\"op\">..</span><span class=\"dv\">4</span>]</span>\n<span id=\"cb1-2\"><a href=\"#cb1-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>[[],[<span class=\"dv\">1</span>],[<span class=\"dv\">1</span>,<span class=\"dv\">2</span>],[<span class=\"dv\">1</span>,<span class=\"dv\">2</span>,<span class=\"dv\">3</span>],[<span class=\"dv\">1</span>,<span class=\"dv\">2</span>,<span class=\"dv\">3</span>,<span class=\"dv\">4</span>],[],[<span class=\"dv\">2</span>],[<span class=\"dv\">2</span>,<span class=\"dv\">3</span>],[<span class=\"dv\">2</span>,<span class=\"dv\">3</span>,<span class=\"dv\">4</span>],[],[<span class=\"dv\">3</span>],[<span class=\"dv\">3</span>,<span class=\"dv\">4</span>],[],[<span class=\"dv\">4</span>],[]]</span></code></pre></div>\n<p>Para isso, uma t\u00e9cnica interessante \u00e9 utilizar as fun\u00e7\u00f5es\n<code>inits</code>, <code>tails</code> e <code>concatMap</code> do\nm\u00f3dulo <code>Data.List</code>. Aprenda como elas funcionam e crie\ninicialmente sua pr\u00f3pria vers\u00e3o dessas tr\u00eas fun\u00e7\u00f5es.</p>\n<p>A implementa\u00e7\u00e3o de <code>all_subs</code> fica f\u00e1cil assim:</p>\n<div class=\"sourceCode\" id=\"cb2\"><pre class=\"sourceCode hs\"><code class=\"sourceCode haskell\"><span id=\"cb2-1\"><a href=\"#cb2-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>all_subseq <span class=\"ot\">=</span> <span class=\"fu\">concatMap</span> inits <span class=\"op\">.</span> tails</span></code></pre></div>\n<p>Voc\u00ea tamb\u00e9m precisar\u00e1 construir uma fun\u00e7\u00e3o que retorna o maior valor\nde uma lista dada uma fun\u00e7\u00e3o de compara\u00e7\u00e3o entre os elementos dessa\nlista. Na Data.List voc\u00ea tem a fun\u00e7\u00e3o <code>maximumBy</code>. Ela recebe\numa fun\u00e7\u00e3o de compara\u00e7\u00e3o, que no nosso caso <strong>n\u00e3o</strong> seria a\nfun\u00e7\u00e3o <code>sum</code> apenas, seria a compara\u00e7\u00e3o das\n<code>sum</code>.</p>\n<div class=\"sourceCode\" id=\"cb3\"><pre class=\"sourceCode hs\"><code class=\"sourceCode haskell\"><span id=\"cb3-1\"><a href=\"#cb3-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>my_compare fn x y <span class=\"ot\">=</span> <span class=\"fu\">compare</span> (fn x) (fn y)</span></code></pre></div>\n<p>Nossa fun\u00e7\u00e3o my_compare retorna um tipo <code>Ordering</code>.\n<code>compare</code> recebe dois valores e retorna LT, GT ou EQ.\n<code>my_compare</code> \u00e9 equivalente a invocar\n<code>comparing sum</code> da biblioteca padr\u00e3o, que aplica a fun\u00e7\u00e3o\n<code>sum</code> em ambos os valores e invoca <code>compare</code>.</p>\n<h2 id=\"utilizando-as-bibliotecas-do-haskell\">Utilizando as bibliotecas\ndo Haskell</h2>\n<p>Essa seria a resposta do problema utilizando as vers\u00f5es nativas do\nhaskell.</p>\n<div class=\"sourceCode\" id=\"cb4\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb4-1\"><a href=\"#cb4-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>import Data.List (inits, tails, maximumBy)</span>\n<span id=\"cb4-2\"><a href=\"#cb4-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>import Data.Ord (comparing)</span>\n<span id=\"cb4-3\"><a href=\"#cb4-3\" aria-hidden=\"true\" tabindex=\"-1\"></a> </span>\n<span id=\"cb4-4\"><a href=\"#cb4-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>subseqs :: [a] -&gt; [[a]]</span>\n<span id=\"cb4-5\"><a href=\"#cb4-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>subseqs = concatMap inits . tails</span>\n<span id=\"cb4-6\"><a href=\"#cb4-6\" aria-hidden=\"true\" tabindex=\"-1\"></a> </span>\n<span id=\"cb4-7\"><a href=\"#cb4-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>maxsubseq :: (Ord a, Num a) =&gt; [a] -&gt; [a]</span>\n<span id=\"cb4-8\"><a href=\"#cb4-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>maxsubseq = maximumBy (comparing sum) . subseqs</span>\n<span id=\"cb4-9\"><a href=\"#cb4-9\" aria-hidden=\"true\" tabindex=\"-1\"></a> </span>\n<span id=\"cb4-10\"><a href=\"#cb4-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>main = print $ maxsubseq [-1, -2, 3, 5, 6, -2, -1, 4, -4, 2, -1]</span></code></pre></div>\n<p>Agora implemente as suas vers\u00f5es das fun\u00e7\u00f5es <code>inits</code>,\n<code>tails</code>, <code>concatMap</code> e <code>maximumBy</code>.</p>\n<div class=\"sourceCode\" id=\"cb5\"><pre class=\"sourceCode hs\"><code class=\"sourceCode haskell\"><span id=\"cb5-1\"><a href=\"#cb5-1\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">--IN : Lista u de inteiros (podem ser positivos, negativos ou zero)</span></span>\n<span id=\"cb5-2\"><a href=\"#cb5-2\" aria-hidden=\"true\" tabindex=\"-1\"></a><span class=\"co\">--OUT:  Sublista de u de elementos consecutivos cuja soma \u00e9 m\u00e1xima</span></span>\n<span id=\"cb5-3\"><a href=\"#cb5-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>maxsubseq [] <span class=\"op\">==</span> []</span>\n<span id=\"cb5-4\"><a href=\"#cb5-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>maxsubseq [<span class=\"dv\">1</span>,<span class=\"dv\">3</span>,<span class=\"op\">-</span><span class=\"dv\">5</span>,<span class=\"dv\">1</span>,<span class=\"dv\">2</span>,<span class=\"op\">-</span><span class=\"dv\">2</span>] <span class=\"op\">==</span> [<span class=\"dv\">1</span>,<span class=\"dv\">3</span>]</span>\n<span id=\"cb5-5\"><a href=\"#cb5-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>maxsubseq [<span class=\"dv\">2</span>,<span class=\"dv\">3</span>,<span class=\"op\">-</span><span class=\"dv\">1</span>,<span class=\"dv\">2</span>,<span class=\"op\">-</span><span class=\"dv\">3</span>,<span class=\"dv\">2</span>] <span class=\"op\">==</span> [<span class=\"dv\">2</span>,<span class=\"dv\">3</span>,<span class=\"op\">-</span><span class=\"dv\">1</span>,<span class=\"dv\">2</span>]</span>\n<span id=\"cb5-6\"><a href=\"#cb5-6\" aria-hidden=\"true\" tabindex=\"-1\"></a>maxsubseq [<span class=\"dv\">4</span>,<span class=\"dv\">3</span>,<span class=\"dv\">1</span>] <span class=\"op\">==</span> [<span class=\"dv\">4</span>,<span class=\"dv\">3</span>,<span class=\"dv\">1</span>]</span>\n<span id=\"cb5-7\"><a href=\"#cb5-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>maxsubseq [<span class=\"dv\">2</span>,<span class=\"dv\">1</span>,<span class=\"op\">-</span><span class=\"dv\">4</span>,<span class=\"dv\">9</span>,<span class=\"dv\">7</span>,<span class=\"op\">-</span><span class=\"dv\">1</span>,<span class=\"dv\">5</span>] <span class=\"op\">==</span> [<span class=\"dv\">9</span>,<span class=\"dv\">7</span>,<span class=\"op\">-</span><span class=\"dv\">1</span>,<span class=\"dv\">5</span>]</span></code></pre></div>\n<h2 id=\"testes\">Testes</h2>\n<div class=\"sourceCode\" id=\"cb6\"><pre\nclass=\"sourceCode txt\"><code class=\"sourceCode default\"><span id=\"cb6-1\"><a href=\"#cb6-1\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>\n<span id=\"cb6-2\"><a href=\"#cb6-2\" aria-hidden=\"true\" tabindex=\"-1\"></a>[]</span>\n<span id=\"cb6-3\"><a href=\"#cb6-3\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb6-4\"><a href=\"#cb6-4\" aria-hidden=\"true\" tabindex=\"-1\"></a>[]</span>\n<span id=\"cb6-5\"><a href=\"#cb6-5\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n<span id=\"cb6-6\"><a href=\"#cb6-6\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb6-7\"><a href=\"#cb6-7\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>\n<span id=\"cb6-8\"><a href=\"#cb6-8\" aria-hidden=\"true\" tabindex=\"-1\"></a>[1,3,-5,1,2,-2]</span>\n<span id=\"cb6-9\"><a href=\"#cb6-9\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb6-10\"><a href=\"#cb6-10\" aria-hidden=\"true\" tabindex=\"-1\"></a>[1,3]</span>\n<span id=\"cb6-11\"><a href=\"#cb6-11\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n<span id=\"cb6-12\"><a href=\"#cb6-12\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb6-13\"><a href=\"#cb6-13\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>\n<span id=\"cb6-14\"><a href=\"#cb6-14\" aria-hidden=\"true\" tabindex=\"-1\"></a>[2,3,-1,2,-3,2]</span>\n<span id=\"cb6-15\"><a href=\"#cb6-15\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb6-16\"><a href=\"#cb6-16\" aria-hidden=\"true\" tabindex=\"-1\"></a>[2,3,-1,2]</span>\n<span id=\"cb6-17\"><a href=\"#cb6-17\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n<span id=\"cb6-18\"><a href=\"#cb6-18\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb6-19\"><a href=\"#cb6-19\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>\n<span id=\"cb6-20\"><a href=\"#cb6-20\" aria-hidden=\"true\" tabindex=\"-1\"></a>[4,3,1]</span>\n<span id=\"cb6-21\"><a href=\"#cb6-21\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb6-22\"><a href=\"#cb6-22\" aria-hidden=\"true\" tabindex=\"-1\"></a>[4,3,1]</span>\n<span id=\"cb6-23\"><a href=\"#cb6-23\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span>\n<span id=\"cb6-24\"><a href=\"#cb6-24\" aria-hidden=\"true\" tabindex=\"-1\"></a></span>\n<span id=\"cb6-25\"><a href=\"#cb6-25\" aria-hidden=\"true\" tabindex=\"-1\"></a>&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span>\n<span id=\"cb6-26\"><a href=\"#cb6-26\" aria-hidden=\"true\" tabindex=\"-1\"></a>[2,1,-4,9,7,-1,5]</span>\n<span id=\"cb6-27\"><a href=\"#cb6-27\" aria-hidden=\"true\" tabindex=\"-1\"></a>========</span>\n<span id=\"cb6-28\"><a href=\"#cb6-28\" aria-hidden=\"true\" tabindex=\"-1\"></a>[9,7,-1,5]</span>\n<span id=\"cb6-29\"><a href=\"#cb6-29\" aria-hidden=\"true\" tabindex=\"-1\"></a>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></code></pre></div>\n</body>\n</html>",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n[]\n======== EXPECT\n[]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[1,3,-5,1,2,-2]\n======== EXPECT\n[1,3]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[2,3,-1,2,-3,2]\n======== EXPECT\n[2,3,-1,2]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[4,3,1]\n======== EXPECT\n[4,3,1]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[2,1,-4,9,7,-1,5]\n======== EXPECT\n[9,7,-1,5]\n<<<<<<<< FINISH\n\n",
            "encoding": 0
        }
    ],
    "keep": [],
    "required": [],
    "draft": {
        "hs": [
            {
                "name": "Main.hs",
                "contents": "main :: IO ()\nmain = do\n    a <- readLn :: IO [Int]\n    print $ maxsubseq a\n",
                "encoding": 0
            }
        ]
    }
}
