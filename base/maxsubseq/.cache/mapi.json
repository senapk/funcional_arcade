{
    "title": "@maxsubseq: Subsequ\u00eancia com maior soma",
    "description": "# Subsequ\u00eancia com maior soma\n\n[](solver.hs)\n\n## Guia\n\n- Entrada: Lista u de inteiros (podem ser positivos, negativos ou zero).\n- Sa\u00edda: Sublista de u de elementos consecutivos cuja soma \u00e9 m\u00e1xima.\n\nPrimeiro voc\u00ea precisa gerar todas as subsequencias poss\u00edveis e depois procurar a que gera maior soma.\n\n```hs\n> all_subseqs [1..4]\n[[],[1],[1,2],[1,2,3],[1,2,3,4],[],[2],[2,3],[2,3,4],[],[3],[3,4],[],[4],[]]\n```\n\nPara isso, uma t\u00e9cnica interessante \u00e9 utilizar as fun\u00e7\u00f5es `inits`, `tails` e `concatMap` do m\u00f3dulo `Data.List`. Aprenda como elas funcionam e crie inicialmente sua pr\u00f3pria vers\u00e3o dessas tr\u00eas fun\u00e7\u00f5es.\n\nA implementa\u00e7\u00e3o de `all_subs` fica f\u00e1cil assim:\n\n```hs\nall_subseq = concatMap inits . tails\n```\n\nVoc\u00ea tamb\u00e9m precisar\u00e1 construir uma fun\u00e7\u00e3o que retorna o maior valor de uma lista dada uma fun\u00e7\u00e3o de compara\u00e7\u00e3o entre os elementos dessa lista. Na Data.List voc\u00ea tem a fun\u00e7\u00e3o `maximumBy`. Ela recebe uma fun\u00e7\u00e3o de compara\u00e7\u00e3o, que no nosso caso **n\u00e3o** seria a fun\u00e7\u00e3o `sum` apenas, seria a compara\u00e7\u00e3o das `sum`.\n\n```hs\nmy_compare fn x y = compare (fn x) (fn y)\n```\n\nNossa fun\u00e7\u00e3o my_compare retorna um tipo `Ordering`. `compare` recebe dois valores e retorna LT, GT ou EQ. `my_compare` \u00e9 equivalente a invocar `comparing sum` da biblioteca padr\u00e3o, que aplica a fun\u00e7\u00e3o `sum` em ambos os valores e invoca `compare`.\n\n## Utilizando as bibliotecas do Haskell\n\nEssa seria a resposta do problema utilizando as vers\u00f5es nativas do haskell.\n\n```txt\nimport Data.List (inits, tails, maximumBy)\nimport Data.Ord (comparing)\n \nsubseqs :: [a] -> [[a]]\nsubseqs = concatMap inits . tails\n \nmaxsubseq :: (Ord a, Num a) => [a] -> [a]\nmaxsubseq = maximumBy (comparing sum) . subseqs\n \nmain = print $ maxsubseq [-1, -2, 3, 5, 6, -2, -1, 4, -4, 2, -1]\n```\n\nAgora implemente as suas vers\u00f5es das fun\u00e7\u00f5es `inits`, `tails`, `concatMap` e `maximumBy`.\n\n```hs\n--IN : Lista u de inteiros (podem ser positivos, negativos ou zero)\n--OUT:  Sublista de u de elementos consecutivos cuja soma \u00e9 m\u00e1xima\nmaxsubseq [] == []\nmaxsubseq [1,3,-5,1,2,-2] == [1,3]\nmaxsubseq [2,3,-1,2,-3,2] == [2,3,-1,2]\nmaxsubseq [4,3,1] == [4,3,1]\nmaxsubseq [2,1,-4,9,7,-1,5] == [9,7,-1,5]\n```\n\n## Testes\n\n```txt\n>>>>>>>>\n[]\n========\n[]\n<<<<<<<<\n\n>>>>>>>>\n[1,3,-5,1,2,-2]\n========\n[1,3]\n<<<<<<<<\n\n>>>>>>>>\n[2,3,-1,2,-3,2]\n========\n[2,3,-1,2]\n<<<<<<<<\n\n>>>>>>>>\n[4,3,1]\n========\n[4,3,1]\n<<<<<<<<\n\n>>>>>>>>\n[2,1,-4,9,7,-1,5]\n========\n[9,7,-1,5]\n<<<<<<<<\n\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n[]\n======== EXPECT\n[]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[1,3,-5,1,2,-2]\n======== EXPECT\n[1,3]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[2,3,-1,2,-3,2]\n======== EXPECT\n[2,3,-1,2]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[4,3,1]\n======== EXPECT\n[4,3,1]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[2,1,-4,9,7,-1,5]\n======== EXPECT\n[9,7,-1,5]\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "hs": [
            {
                "name": "Main.hs",
                "contents": "main :: IO ()\nmain = do\n    a <- readLn :: IO [Int]\n    print $ maxsubseq a\n",
                "type": "show"
            }
        ]
    }
}
