{
    "title": "@burn: Queimada",
    "description": "# Queimada\n\nReceba uma matriz de caracteres de `nl` linhas por `nc` colunas formadas apenas pelos char `.` e `#`.\n\nOs caracteres `.` representam espa\u00e7os vazios e os char `#` representam \u00e1rvores. O fogo come\u00e7a sempre na posi\u00e7\u00e3o linha 0, coluna 0 e se espalha para as \u00e1rvores vizinhas apenas nas dire\u00e7\u00f5es norte, sul, leste, oeste. O fogo n\u00e3o se espalha pelas diagonais. Seu objetivo \u00e9 imprimir o resultado do campo ap\u00f3s a queimada, colocando `o` nas \u00e1rvores que queimaram.\n\n## Testes\n\n```txt\n>>>>>>>>\n4 10\n####...##.\n####......\n..##...##.\n#.#######.\n========\noooo...##.\noooo......\n..oo...oo.\n#.ooooooo.\n<<<<<<<<\n\n>>>>>>>>\n4 10\n####...##.\n#..#......\n.......##.\n#.#######.\n========\noooo...##.\no..o......\n.......##.\n#.#######.\n<<<<<<<<\n\n\n>>>>>>>>\n3 9\n####...##\n####.....\n#.##...##\n========\noooo...##\noooo.....\no.oo...##\n<<<<<<<<\n```\n\n## Entrada\n\n```hs\nimport Control.Monad (replicateM)\n\nmain :: IO ()\nmain = do\n    [nl, nc] <-  map (read :: String -> Int) . words <$> getLine\n    mat <- replicateM nl getLine\n    mapM_ putStrLn mat \n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n4 10\n####...##.\n####......\n..##...##.\n#.#######.\n======== EXPECT\noooo...##.\noooo......\n..oo...oo.\n#.ooooooo.\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n4 10\n####...##.\n#..#......\n.......##.\n#.#######.\n======== EXPECT\noooo...##.\no..o......\n.......##.\n#.#######.\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n3 9\n####...##\n####.....\n#.##...##\n======== EXPECT\noooo...##\noooo.....\no.oo...##\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "hs": [
            {
                "name": "Main.hs",
                "contents": "import Control.Monad (replicateM)\n\nmain :: IO ()\nmain = do\n    [nl, nc] <-  map (read :: String -> Int) . words <$> getLine\n    mat <- replicateM nl getLine\n    let (_, _, mat') = burn (nl, nc, mat) (0, 0)\n    mapM_ putStrLn mat' -- imprime linha a linha a matriz\n",
                "type": "show"
            }
        ]
    }
}
