{
    "title": "@subsets: Montando subconjuntos",
    "description": "# Montando subconjuntos\n\n- IN : Lista u\n- OUT: Conjunto das partes de u (O conjunto das partes de um conjunto C \u00e9 o conjunto de todos os subconjuntos distintos e poss\u00edveis de C)\n\n```hs\npartes [1,2] == [[],[1],[2],[1,2]]\npartes [1,2,3] == [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\npartes [1,4,3] == [[],[1],[4],[1,4],[3],[1,3],[4,3],[1,4,3]]\npartes [2,3,2,9] == [[],[2],[3],[2,3],[2],[2,2],[3,2],[2,3,2],[9],[2,9],[3,9],[2,3,9],[2,9],[2,2,9],[3,2,9],[2,3,2,9]]\n```\n\n## Ajuda\n\nPara formar os subconjuntos, use a seguinte regra\n\n```txt\nSubconjuntos de um conjunto vazio \u00e9 um conjunto vazio\nSubconjuntos de um elemento: resto \u00e9:\n    (subconjuntos do resto) ++ (elemento interagindo com subconjuntos do resto)\n\nDepois fa\u00e7a algumas opera\u00e7\u00f5es de reverse para sa\u00edda ficar bonita que nem a do exemplo. \n```\n\n## Testes\n\n```txt\n>>>>>>>>\n[1,2]\n========\n[[],[1],[2],[1,2]]\n<<<<<<<<\n\n>>>>>>>>\n[1,2,3]\n========\n[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n<<<<<<<<\n\n>>>>>>>>\n[1,4,3]\n========\n[[],[1],[4],[1,4],[3],[1,3],[4,3],[1,4,3]]\n<<<<<<<<\n\n>>>>>>>>\n[2,3,2,9]\n========\n[[],[2],[3],[2,3],[2],[2,2],[3,2],[2,3,2],[9],[2,9],[3,9],[2,3,9],[2,9],[2,2,9],[3,2,9],[2,3,2,9]]\n<<<<<<<<\n\n```\n",
    "upload": [
        {
            "name": "vpl_evaluate.cases",
            "contents": ">>>>>>>> INSERT\n[1,2]\n======== EXPECT\n[[],[1],[2],[1,2]]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[1,2,3]\n======== EXPECT\n[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[1,4,3]\n======== EXPECT\n[[],[1],[4],[1,4],[3],[1,3],[4,3],[1,4,3]]\n<<<<<<<< FINISH\n\n\n>>>>>>>> INSERT\n[2,3,2,9]\n======== EXPECT\n[[],[2],[3],[2,3],[2],[2,2],[3,2],[2,3,2],[9],[2,9],[3,9],[2,3,9],[2,9],[2,2,9],[3,2,9],[2,3,2,9]]\n<<<<<<<< FINISH\n\n",
            "type": "hide"
        }
    ],
    "draft": {
        "hs": [
            {
                "name": "Main.hs",
                "contents": "main :: IO ()\nmain = do\n    a <- readLn :: IO [Int]\n    print $ partes a\n",
                "type": "show"
            }
        ]
    }
}
